// MEDIA QUERY MANAGER
/*

>=390px:   xs - mobile x-small
>=576px:   sm - mobile small
>=768px:   md - Tablet portrait
>=992px:   lg - Tablet landscape
>=1200px:  xl - Extra large
>=1440px:  xxl - Extra extra large
$breakpoint arguement choices:
- xs
- sm
- md
- lg
- xl
- xxl

1em = 16px
*/
@use 'sass:math';

@mixin respond($breakpoint) {
  @if $breakpoint == xs {
    @media only screen and (min-width: $screen-xs) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media only screen and (min-width: $screen-sm) {
      @content;
    }
  } @else if $breakpoint == md {
    @media only screen and (min-width: $screen-md) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media only screen and (min-width: $screen-lg) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media only screen and (min-width: $screen-xl) {
      @content;
    }
  } @else if $breakpoint == xxl {
    @media only screen and (min-width: $screen-xxl) {
      @content;
    }
  } @else {
    @media only screen and (min-width: $breakpoint) {
      @content;
    }
  }
}

@mixin respond-max($breakpoint) {
  @if $breakpoint == xs {
    @media only screen and (max-width: $screen-xs) {
      @content;
    }
  } @else if $breakpoint == sm {
    @media only screen and (max-width: $screen-sm) {
      @content;
    }
  } @else if $breakpoint == md {
    @media only screen and (max-width: $screen-md) {
      @content;
    }
  } @else if $breakpoint == lg {
    @media only screen and (max-width: $screen-lg) {
      @content;
    }
  } @else if $breakpoint == xl {
    @media only screen and (max-width: $screen-xl) {
      @content;
    }
  } @else if $breakpoint == xxl {
    @media only screen and (max-width: $screen-xxl) {
      @content;
    }
  } @else {
    @media only screen and (max-width: $breakpoint) {
      @content;
    }
  }
}

//REM
@function toRem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Брейк-поинты в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плавающего значения
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{toRem($yIntersection)}' + ' #{$slope * 100}vw;

  // Получение значения свойства
  $propertyValue: #{'clamp(' toRem($minSize) ',' $flyValue ',' toRem($startSize) ')'};
  // Если отрицательные значения
  @if ($minSize > $startSize) {
    $propertyValue: #{'clamp(' toRem($startSize) ',' $flyValue ',' toRem($minSize) ')'};
  }

  // Если поддерживается clamp();
  @supports (#{$property}: $propertyValue) {
    #{$property}: $propertyValue;
  }
  // Если не поддерживается clamp();
  @supports not (#{$property}: $propertyValue) {
    #{$property}: calc(
      #{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) -
        math.div($widthTo, 16)}
    );
  }

  // Устанавливаем значения по умолчанию
  @if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
    @media (min-width: $widthFromMedia) {
      #{$property}: inherit;
    }
  }
  @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: inherit;
    }
  }
}
